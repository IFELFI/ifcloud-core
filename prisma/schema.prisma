generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["file", "member", "public", "temp_file"]
}

model file {
  id                                  BigInt      @id(map: "pk_file") @default(autoincrement())
  file_key                            String      @unique(map: "uni_file_file_key") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                                file_type   @default(block)
  file_name                           String      @db.VarChar(256)
  owner_id                            Int
  member                              member      @relation(fields: [owner_id], references: [id], onDelete: Cascade, map: "fk_owner_id")
  file_info                           file_info?
  file_link_file_link_file_idTofile   file_link?  @relation("file_link_file_idTofile")
  file_link_file_link_target_idTofile file_link[] @relation("file_link_target_idTofile")
  file_path                           file_path?
  file_role                           file_role[]
  temp_file                           temp_file[]

  @@schema("file")
}

model file_info {
  file_id     BigInt   @id(map: "pk_file_info")
  create_date DateTime @default(now()) @db.Timestamptz(6)
  update_date DateTime @default(now()) @db.Timestamptz(6)
  byte_size   Int      @default(0)
  file        file     @relation(fields: [file_id], references: [id], onDelete: Cascade, map: "fk_file_id")

  @@schema("file")
}

model file_role {
  member_id Int
  file_id   BigInt
  role      access_role[] @default([])
  file      file          @relation(fields: [file_id], references: [id], onDelete: Cascade, map: "fk_file_id")
  member    member        @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "fk_member_id")

  @@id([member_id, file_id], map: "pk_file_role")
  @@schema("file")
}

model member {
  id             Int             @id(map: "pk_member") @default(autoincrement())
  uuid_key       String          @unique(map: "uni_member_uuid_key") @db.Uuid
  file           file[]
  file_role      file_role[]
  service_status service_status?
  temp_file      temp_file[]

  @@schema("member")
}

model service_status {
  member_id   Int      @id(map: "pk_service_status")
  available   Boolean  @default(false)
  join_date   DateTime @default(now()) @db.Timestamptz(6)
  update_date DateTime @default(now()) @db.Timestamptz(6)
  member      member   @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "fk_member_id")

  @@schema("member")
}

model temp_file {
  id          BigInt   @id(map: "pk_temp_file") @default(autoincrement())
  owner_id    Int
  file_key    String   @unique(map: "uni_file_key") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file_name   String   @db.VarChar(256)
  byte_size   Int      @default(0)
  create_date DateTime @default(now()) @db.Timestamptz(6)
  parent_id   BigInt
  member      member   @relation(fields: [owner_id], references: [id], onDelete: Cascade, map: "fk_owner_id")
  file        file     @relation(fields: [parent_id], references: [id], onDelete: Cascade, map: "fk_parent_id")

  @@schema("temp_file")
}

model file_path {
  file_id BigInt   @id(map: "pk_file_path")
  path    BigInt[] @default([])
  file    file     @relation(fields: [file_id], references: [id], onDelete: Cascade, map: "fk_file_id")

  @@schema("file")
}

model file_link {
  file_id                        BigInt @id(map: "pk_file_link")
  target_id                      BigInt
  file_file_link_file_idTofile   file   @relation("file_link_file_idTofile", fields: [file_id], references: [id], onDelete: Cascade, map: "fk_file_id")
  file_file_link_target_idTofile file   @relation("file_link_target_idTofile", fields: [target_id], references: [id], onDelete: Cascade, map: "fk_target_file_id")

  @@schema("file")
}

enum access_role {
  create
  read
  update
  delete

  @@schema("public")
}

enum file_type {
  container
  block
  link

  @@schema("public")
}
