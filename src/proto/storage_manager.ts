// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v5.28.2
// source: src/proto/storage_manager.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "storage_manager";

export interface MergeRequest {
  fileKey: string;
  totalChunkCount: number;
}

export interface DeleteRequest {
  fileKey: string;
}

export interface StorageManageReply {
  message: string;
}

export const STORAGE_MANAGER_PACKAGE_NAME = "storage_manager";

export interface StorageManageClient {
  merge(request: MergeRequest): Observable<StorageManageReply>;

  delete(request: DeleteRequest): Observable<StorageManageReply>;
}

export interface StorageManageController {
  merge(request: MergeRequest): Promise<StorageManageReply> | Observable<StorageManageReply> | StorageManageReply;

  delete(request: DeleteRequest): Promise<StorageManageReply> | Observable<StorageManageReply> | StorageManageReply;
}

export function StorageManageControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["merge", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("StorageManage", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("StorageManage", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const STORAGE_MANAGE_SERVICE_NAME = "StorageManage";
